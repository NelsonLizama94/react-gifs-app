{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputCategory","setInputCategory","onSubmit","event","preventDefault","trim","length","prevItems","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"iNAkCeA,MA/Bf,YAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EAEIC,mBAAS,IAFb,mBAE/BC,EAF+B,KAEhBC,EAFgB,KAgBtC,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAMC,iBACFJ,EAAcK,OAAOC,OAAS,IAChCR,GAAc,SAAAS,GAAS,OAAKP,GAAL,mBAAuBO,OAC9CN,EAAiB,MAKnB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAiBE,EAAMQ,OAAOF,a,QCUnBG,MAff,YAAyC,EAAlBC,GAAmB,IAAfC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,IAChC,OACE,sBAAKC,UAAU,6CAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCPGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,iDACkCO,UAAWF,GAD7C,+DAEEG,MAAMR,GAFR,cAEfS,EAFe,gBAGEA,EAASC,OAHX,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QARjB,kBAWdY,GAXc,4CAAH,sDC+BLK,MA1Bf,YAAgC,IAAbZ,EAAY,EAAZA,SAAY,ECFH,SAACA,GAAc,IAAD,EAEdrB,mBAAS,CACjC2B,KAAM,GACNO,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAoBxC,OAZAC,qBAAU,WAERjB,EAAQC,GACLiB,MAAM,SAAAC,GACLH,EAAS,CACPT,KAAMY,EACNL,SAAS,SAId,CAACb,IAEGc,EDhB0BK,CAAanB,GAAjCU,EAFgB,EAErBJ,KAAaO,EAFQ,EAERA,QAErB,OACE,qCACE,oBAAIjB,UAAU,wCAAd,SAAuDI,IACrDa,GAAW,mBAAGjB,UAAU,wCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEIc,EAAOF,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,eAEMA,GADCA,EAAIhB,aEmBR2B,EA/BM,WAEnB,IAFyB,EAGWzC,mBADf,CAAC,gBAFG,mBAGlB0C,EAHkB,KAGN3C,EAHM,KAKzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEI2C,EAAWb,KAAI,SAACR,EAAUsB,GAAX,OACb,cAAC,EAAD,CAEEtB,SAAUA,GADLA,YCdnBuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2210d753.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction AddCategory({ setCategories }) {\r\n\r\n  const [inputCategory, setInputCategory] = useState('');\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputCategory(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (inputCategory.trim().length > 2) {\r\n      setCategories(prevItems => [inputCategory, ...prevItems]);\r\n      setInputCategory('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputCategory}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction GifGridItem({ id, title, url }) {\r\n  return (\r\n    <div className=\"card animate__animated animate__rubberBand\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n};\r\n\r\nGifGridItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GifGridItem;\r\n\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=kCWitzTCa6VnAnoqNjVsGWWmVeBD8Uix`;\r\n  const response = await fetch(url);\r\n  const { data } = await response.json();\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    };\r\n  });\r\n  return gifs;\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nfunction GifGrid({ category }) {\r\n\r\n  const { data:images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__rubberBand\">{category}</h3>\r\n      { loading && <p className=\"card animate__animated animate__flash\">Cargando...</p> }\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map((img) => (\r\n            <GifGridItem\r\n              key={img.id}\r\n              {...img}\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GifGrid;\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  \r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  // Si no se le pasan condiciones al segundo par치metro del useEffect, este s칩lo ejecutar치 el c칩digo en su interior la primera vez que el Componente es renderizado\r\n  useEffect(() => {\r\n\r\n    getGifs(category)\r\n      .then( imgs => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false\r\n        })\r\n      });\r\n\r\n  }, [category]);\r\n\r\n  return state;\r\n\r\n};\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const initialState = ['Dragon Ball'];\r\n  const [categories, setCategories] = useState(initialState);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr/>\r\n\r\n      <ol>\r\n        { // El KEY no debe ser el indice\r\n          categories.map((category, index) => (\r\n            <GifGrid \r\n              key={category}\r\n              category={category} \r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nGifExpertApp.propTypes = {\r\n\r\n};\r\n\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'animate.css/animate.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}